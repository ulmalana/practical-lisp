Functions

* defining new functions
(defun name (parameter*)
  "optional documentation string."
  body-form*)

* function parameter list may be required or optional

* optional parameters
(defun foo (a b &optional c d) (list a b c d))

a and b: required parameters
c and d: optional parameters

* optional parameters with default values
(defun foo (a &optional (b 10)) (list a b))

a: required parameters
b: optional parameters with default value 10

* supplied-p parameters
to check if an argument was supplied by the caller of is the default value
(defun foo (a b &optional (c 3 c-supplied-p))
  (list a b c c-supplied-p))

a and b: required parameters
c: optional parameter with default value 3 and additional c-supplied-p parameter

example:
(foo 1 2)    ==> (1 2 3 NIL)
(foo 1 2 3)  ==> (1 2 3 T)
(foo 1 2 4)  ==> (1 2 4 T)

* rest parameters
to support variable number of parameters.
after putting &rest in parameter list, any args after that will be gathered in a list.
ex:
(defun + (&rest numbers) ...)

* keyword parameters
use keys to refer specific parameters.
in the parameter list, put &rest after any required, &optional, and &rest parameters.

ex:
(defun foo (&key a b c) (list a b c))

(foo)                ==> (NIL NIL NIL)
(foo :a 1)           ==> (1 NIL NIL)
(foo :b 1)           ==> (NIL 1 NIL)
(foo :c 1)           ==> (NIL NIL 1)
(foo :a 1 :c 3)      ==> (1 NIL 3)
(foo :a 1 :c 3 :b 2) ==> (1 2 3)

* keyword parameters with default values
(defun foo (&key (a 0) (b 0 b-supplied-p) (c (+ a b)))
  (list a b c b-supplied-p))
  a: keyword with default value 0
  b: keyword with default value 0 and additional b-supplied-p parameter
  c: keyword with default value (+ a b)

(foo :a 1)                ==> (1 0 1 NIL)
(foo :b 1)                ==> (0 1 1 T)
(foo :b 1 :c 4)           ==> (0 1 4 T)
(foo :a 2 :b 1)           ==> (2 1 3 T)

* keyword parameters with "alias"
this is useful to decouple public API function from internal details

(defun foo (&key ((:apple a)) ((:box b) 0) ((charlie c) 0 c-supplied-p))
  (list a b c c-supplied-p))
ex:
(foo :apple 10 :box 20 :charlie 30) ==> (10 20 30 T)

* mixing parameter types (required, optional, rest, keyword)
mixing parameter types is normal, but some combinations may not work as intended.

combinations to avoid: &optional and &key
ok but careful: &rest and &key

* use RETURN-FROM to return in the middle of function

* FUNCTION operator is used to get at function object
its syntactic sugar: #'

* How to invoke functions
1. FUNCALL (if you know the number of arguments to pass)
   (foo 1 2 3) === (funcall #'foo 1 2 3)
2. APPLY (accepts arbitrary number of args)

* Anonymous function
(lambda (parameters) body)
ex:
(plot #'(lambda (x) (* 2 x)) 0 10 1)
